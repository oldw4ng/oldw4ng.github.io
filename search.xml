<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[strongSwan 配置与使用]]></title>
    <url>%2F2020%2F04%2F23%2Fipsec2%2F</url>
    <content type="text"><![CDATA[本文主要介绍了 IPsec 的一个开源解决方案 storngSwan 的配置和使用方法。 strongSwan 简介strongSwan 是一个一款基于 FreeS/WAN 的 IPsec的开源解决方案。对客户端和服务器提供了加密和验证功能。独特的功能是使用X.509 属性证书来实现基于组成员身份的访问控制方案。StrongSwan可与其他IPsec实现互操作，包括各种Microsoft Windows和macOS VPN客户端。模块化的StrongSwan 5.0分支完全实现了网络密钥交换（IKEv2）协议，由RFC 5996定义。 strongSwan 安装用两台 CentOS 7 虚拟机进行测试 下载wget http://download.strongswan.org/strongswan-x.x.x.tar.bz2 解压tar xjvf strongswan-x.x.x.tar.bz2; cd strongswan-x.x.x configure./configure --prefix=/usr --sysconfdir=/etc --&lt;your-options&gt; build &amp;&amp; installmake &amp;&amp; make install 证书生成与安装证书生成12345678910111213# 生成CA证书ipsec pki --gen --outform pem &gt; cakey.pem # 创建私钥ipsec pki --self --in cakey.pem --dn "C=CN, O=Oldw4ng, CN=Oldw4ng CA" --ca --lifetime 365 --outform pem &gt; cacert.pem # 自签发CA证书# 生成服务器证书ipsec pki --gen --outform pem &gt; serverkey.pemipsec pki --pub --in serverkey.pem --outform pem &gt; serverpub.pemipsec pki --issue --lifetime 30 --cacert cacert.pem --cakey cakey.pem --in serverpub.pem --dn "C=CN, O=Oldw4ng, CN=10.211.55.17" --san="10.211.55.17" --flag serverAuth --flag ikeIntermediate --outform pem &gt; servercert.pem# 生成客户端证书ipsec pki --gen --outform pem &gt; clientkey.pemipsec pki --pub --in clientkey.pem --outform pem &gt; clientpub.pemipsec pki --issue --lifetime 30 --cacert cacert.pem --cakey cakey.pem --in clientpub.pem --dn "C=CN, O=Oldw4ng, CN=10.211.55.16" --outform pem &gt; clientcert.pem 证书安装123456789# vm1 (10.211.55.16)mv cacert.pem /etc/swanctl/x509ca/mv clientkey.pem /etc/swanctl/rsa/mv clientcert.pem /etc/swanctl/x509/# vm2 (10.211.55.17)mv cacert.pem /etc/swanctl/x509ca/mv serverkey.pem /etc/swanctl/rsa/mv servercert.pem /etc/swanctl/x509/ strongSwan 配置本文使用 swanctl 进行配置 Client123456789101112131415161718192021222324[root@localhost ~]# cat /etc/swanctl/conf.d/client.confconnections &#123; test &#123; remote_addrs = 10.211.55.17 local &#123; auth = pubkey certs = clientcert.pem &#125; remote &#123; auth = pubkey id = 10.211.55.17 &#125; children &#123; test &#123; esp_proposals = aes256-sha256-x25519 &#125; &#125; version = 2 mobike = no proposals = aes256-sha256-x25519 &#125;&#125; Server123456789101112131415161718192021222324[root@localhost ~]# cat /etc/swanctl/conf.d/server.confconnections &#123; test &#123; local_addrs = 10.211.55.17 local &#123; auth = pubkey certs = servercert.pem id = 10.211.55.17 &#125; remote &#123; auth = pubkey &#125; children &#123; test &#123; remote_ts = 10.211.55.0/24 esp_proposals = aes256-sha256-x25519 &#125; &#125; version = 2 mobike = no proposals = aes256-sha256-x25519 &#125;&#125; strongSwan 启动防火墙打开 500 和 4500 端口 启动进程/usr/libexec/ipsec/charon &amp; 加载配置swanctl --load-all 启动ipsecipsec up &lt;conn&gt; 关闭ipsecipsec down &lt;conn&gt; 参考[1] strongSwan.org [2] strongSwan Wiki [3] Centos7配置strongswan]]></content>
      <categories>
        <category>网络</category>
      </categories>
      <tags>
        <tag>网络协议</tag>
        <tag>ipsec</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[IPsec 基本原理]]></title>
    <url>%2F2020%2F04%2F21%2Fipsec1%2F</url>
    <content type="text"><![CDATA[本文主要介绍 IPsec 协议和 IKEv2 的原理，strongSwan 的配置及使用直接跳到下一篇 IPsec 简介互联网安全协议（英语：Internet Protocol Security，缩写：IPsec）是一个协议包，透过对IP协议的分组进行加密和认证来保护IP协议的网络传输协议族（一些相互关联的协议的集合）。 IPsec主要由以下协议组成：一、认证头（AH），为IP数据报提供无连接数据完整性、消息认证以及防重放攻击保护；二、封装安全载荷（ESP），提供机密性、数据源认证、无连接完整性、防重放和有限的传输流（traffic-flow）机密性；三、安全关联（SA），提供算法和数据包，提供AH、ESP操作所需的参数。 IPSec通过加密与验证等方式，从以下几个方面保障了用户业务数据在Internet中的安全传输： 数据来源验证：接收方验证发送方身份是否合法。 数据加密：发送方对数据进行加密，以密文的形式在Internet上传送，接收方对接收的加密数据进行解密后处理或直接转发。 数据完整性：接收方对接收的数据进行验证，以判定报文是否被篡改。 抗重放：接收方拒绝旧的或重复的数据包，防止恶意用户通过重复发送捕获到的数据包所进行的攻击。 IPsec 协议框架安全联盟安全联盟SA（Security Association）是通信对等体间对某些要素的协定，它描述了对等体间如何利用安全服务（例如加密）进行安全的通信。这些要素包括对等体间使用何种安全协议、需要保护的数据流特征、对等体间传输的数据的封装模式、协议采用的加密和验证算法，以及用于数据安全转换、传输的密钥和SA的生存周期等。 IPSec安全传输数据的前提是在IPSec对等体（即运行IPSec协议的两个端点）之间成功建立安全联盟。IPSec安全联盟简称IPSec SA，由一个三元组来唯一标识，这个三元组包括安全参数索引SPI（Security Parameter Index）、目的IP地址和使用的安全协议号（AH或ESP）。其中，SPI是为唯一标识SA而生成的一个32位比特的数值，它被封装在AH和ESP头中。 IPSec SA是单向的逻辑连接，通常成对建立（Inbound和Outbound）。因此两个IPSec对等体之间的双向通信，最少需要建立一对IPSec SA形成一个安全互通的IPSec隧道，分别对两个方向的数据流进行安全保护。 另外，IPSec SA的个数还与安全协议相关。如果只使用AH或ESP来保护两个对等体之间的流量，则对等体之间就有两个SA，每个方向上一个。如果对等体同时使用了AH和ESP，那么对等体之间就需要四个SA，每个方向上两个，分别对应AH和ESP。 安全协议IPSec使用认证头AH（Authentication Header）和封装安全载荷ESP（Encapsulating Security Payload）两种IP传输层协议来提供认证或加密等安全服务。 AH协议 AH仅支持认证功能，不支持加密功能。AH在每一个数据包的标准IP报头后面添加一个AH报文头。AH对数据包和认证密钥进行Hash计算，接收方收到带有计算结果的数据包后，执行同样的Hash计算并与原计算结果比较，传输过程中对数据的任何更改将使计算结果无效，这样就提供了数据来源认证和数据完整性校验。AH协议的完整性验证范围为整个IP报文。 ESP协议 ESP支持认证和加密功能。ESP在每一个数据包的标准IP报头后面添加一个ESP报文头，并在数据包后面追加一个ESP尾（ESP Trailer和ESP Auth data）。与AH不同的是，ESP将数据中的有效载荷进行加密后再封装到数据包中，以保证数据的机密性，但ESP没有对IP头的内容进行保护，除非IP头被封装在ESP内部（采用隧道模式）。 AH协议与ESP协议比较 安全特性 AH ESP 协议号 51 50 数据完整性校验 支持（验证整个IP报文） 支持（传输模式：不验证IP头，隧道模式：验证整个IP报文） 数据源验证 支持 支持 数据加密 不支持 支持 防报文重放攻击 支持 支持 IPSec NAT-T（NAT穿越） 不支持 支持 报文头结构 AH报文头结构 ESP报文头结构 封装模式封装模式是指将AH或ESP相关的字段插入到原始IP报文中，以实现对报文的认证和加密，封装模式有传输模式和隧道模式两种。 传输模式在传输模式中，AH头或ESP头被插入到IP头与传输层协议头之间，保护TCP/UDP/ICMP负载。由于传输模式未添加额外的IP头，所以原始报文中的IP地址在加密后报文的IP头中可见。以TCP报文为例，原始报文经过传输模式封装后，报文格式如下图所示。 传输模式下，与AH协议相比，ESP协议的完整性验证范围不包括IP头，无法保证IP头的安全。 隧道模式在隧道模式下，AH头或ESP头被插到原始IP头之前，另外生成一个新的报文头放到AH头或ESP头之前，保护IP头和负载。以TCP报文为例，原始报文经隧道模式封装后的报文结构如下图所示。 隧道模式下，与AH协议相比，ESP协议的完整性验证范围不包括新IP头，无法保证新IP头的安全。 传输模式和隧道模式比较传输模式和隧道模式的区别在于： 从安全性来讲，隧道模式优于传输模式。它可以完全地对原始IP数据报进行验证和加密。隧道模式下可以隐藏内部IP地址，协议类型和端口。 从性能来讲，隧道模式因为有一个额外的IP头，所以它将比传输模式占用更多带宽。 从场景来讲，传输模式主要应用于两台主机或一台主机和一台VPN网关之间通信；隧道模式主要应用于两台VPN网关之间或一台主机与一台VPN网关之间的通信。 当安全协议同时采用AH和ESP时，AH和ESP协议必须采用相同的封装模式。 加密和验证IPSec提供了两种安全机制：加密和验证。加密机制保证数据的机密性，防止数据在传输过程中被窃听；验证机制能保证数据真实可靠，防止数据在传输过程中被仿冒和篡改。 加密IPSec采用对称加密算法对数据进行加密和解密。数据发送方和接收方使用相同的密钥进行加密、解密。 用于加密和解密的对称密钥可以手工配置，也可以通过IKE协议自动协商生成。 常用的对称加密算法包括：数据加密标准DES（Data Encryption Standard）、3DES（Triple Data Encryption Standard）、先进加密标准AES（Advanced Encryption Standard）。其中，DES和3DES算法安全性低，存在安全风险，不推荐使用。 验证IPSec的加密功能，无法验证解密后的信息是否是原始发送的信息或完整。IPSec采用HMAC（Keyed-Hash Message Authentication Code）功能，比较数字签名进行数据包完整性和真实性验证。 通常情况下，加密和验证通常配合使用。在IPSec发送方，加密后的报文通过验证算法和对称密钥生成数字签名，IP报文和数字签名同时发给对端；在IPSec接收方，使用相同的验证算法和对称密钥对加密报文进行处理，同样得到签名，然后比较数字签名进行数据完整性和真实性验证，验证不通过的报文直接丢弃，验证通过的报文再进行解密。 同加密一样，用于验证的对称密钥也可以手工配置，或者通过IKE协议自动协商生成。 常用的验证算法包括：消息摘要MD5（Message Digest 5）、安全散列算法SHA1（Secure Hash Algorithm 1）、SHA2。其中，MD5、SHA1算法安全性低，存在安全风险，不推荐使用。 密钥交换密钥交换有两种解决方式： 带外共享密钥 在发送、接收设备上手工配置静态的加密、验证密钥。双方通过带外共享的方式（例如通过电话或邮件方式）保证密钥一致性。这种方式的缺点是安全性低，可扩展性差，在点到多点组网中配置密钥的工作量成倍增加。另外，为提升网络安全性需要周期性修改密钥，这种方式下也很难实施。 使用一个安全的密钥分发协议 通过IKE协议自动协商密钥。IKE采用DH（Diffie-Hellman）算法在不安全的网络上安全地分发密钥。这种方式配置简单，可扩展性好，特别是在大型动态的网络环境下此优点更加突出。同时，通信双方通过交换密钥交换材料来计算共享的密钥，即使第三方截获了双方用于计算密钥的所有交换数据，也无法计算出真正的密钥，这样极大地提高了安全性。 IKE协议因特网密钥交换IKE（Internet Key Exchange）协议建立在Internet安全联盟和密钥管理协议ISAKMP定义的框架上，是基于UDP（User Datagram Protocol）的应用层协议。它为IPSec提供了自动协商密钥、建立IPSec安全联盟的服务，能够简化IPSec的配置和维护工作。 对等体之间建立一个IKE SA完成身份验证和密钥信息交换后，在IKE SA的保护下，根据配置的AH/ESP安全协议等参数协商出一对IPSec SA。此后，对等体间的数据将在IPSec隧道中加密传输。 IKE SA是一个双向的逻辑连接，两个对等体间只建立一个IKE SA。 IKE安全机制IKE具有一套自保护机制，可以在网络上安全地认证身份、分发密钥、建立IPSec SA： 身份认证 身份认证确认通信双方的身份（对等体的IP地址或名称），包括预共享密钥PSK（pre-shared key）认证、数字证书RSA（rsa-signature）认证。 在预共享密钥认证中，通信双方采用共享的密钥对报文进行Hash计算，判断双方的计算结果是否相同。如果相同，则认证通过；否则认证失败。 当有1个对等体对应多个对等体时，需要为每个对等体配置预共享的密钥。该方法在小型网络中容易建立，但安全性较低。 在数字证书认证中，通信双方使用CA证书进行数字证书合法性验证，双方各有自己的公钥（网络上传输）和私钥（自己持有）。发送方对原始报文进行Hash计算，并用自己的私钥对报文计算结果进行加密，生成数字签名。接收方使用发送方的公钥对数字签名进行解密，并对报文进行Hash计算，判断计算结果与解密后的结果是否相同。如果相同，则认证通过；否则认证失败。 使用数字证书安全性高，但需要CA来颁发数字证书，适合在大型网络中使用。 IKE支持的认证算法有：MD5、SHA2-256。 身份保护 身份数据在密钥产生之后加密传送，实现了对身份数据的保护。 IKE支持的加密算法有：DES、3DES、AES-128、AES-192、AES-256。 DH DH是一种公共密钥交换方法，它用于产生密钥材料，并通过ISAKMP消息在发送和接收设备之间进行密钥材料交换。然后，两端设备各自计算出完全相同的对称密钥。该对称密钥用于计算加密和验证的密钥。在任何时候，通信双方都不交换真正的密钥。DH密钥交换是IKE的精髓所在。 PFS 完善的前向安全性PFS（Perfect Forward Secrecy）通过执行一次额外的DH交换，确保即使IKE SA中使用的密钥被泄露，IPSec SA中使用的密钥也不会受到损害。 为了保证更好的安全性，建议使用SHA2-256认证算法和AES加密算法。 IPsec 基本原理IPSec通过在IPSec对等体间建立双向安全联盟形成一个安全互通的IPSec隧道，并通过定义IPSec保护的数据流将要保护的数据引入该IPSec隧道，然后对流经IPSec隧道的数据通过安全协议进行加密和验证，进而实现在Internet上安全传输指定的数据。 IPSec安全联盟可以通过IKEv1或IKEv2协议自动协商建立。 IKEv2 安全联盟协商过程建立一对IPSec SA，IKEv2正常情况使用2次交换共4条消息就可以完成一对IPSec SA的建立，如果要求建立的IPSec SA大于一对时，每一对IPSec SA只需额外增加1次创建子SA交换，也就是2条消息就可以完成。 IKEv2定义了三种交换：初始交换（Initial Exchanges）、创建子SA交换（Create_Child_SA Exchange）以及通知交换（Informational Exchange）。 初始交换正常情况下，IKEv2通过初始交换就可以完成第一对IPSec SA的协商建立。IKEv2初始交换对应IKEv1的第一阶段，初始交换包含两次交换四条消息： 12345678910Initiator Responder-------------------------------------------------------------------HDR, SAi1, KEi, Ni --&gt; &lt;-- HDR, SAr1, KEr, Nr, [CERTREQ]HDR, SK &#123;IDi, [CERT,] [CERTREQ,] [IDr,] AUTH, SAi2, TSi, TSr&#125; --&gt; &lt;-- HDR, SK &#123;IDr, [CERT,] AUTH, SAr2, TSi, TSr&#125; IKE_SA_INIT交换，以明文方式完成IKE SA的参数协商，包括协商加密和验证算法，交换临时随机数和DH交换。IKE_SA_INIT交换后生成一个共享密钥材料，通过这个共享密钥材料可以衍生出IPSec SA的所有密钥。 称为IKE_AUTH交换，以加密方式完成身份认证、对前两条信息的认证和IPSec SA的参数协商。IKEv2支持RSA签名认证、预共享密钥认证以及扩展认证方法EAP（Extensible Authentication Protocol）。发起者通过在消息3中省去认证载荷来表明需要使用EAP认证。 创建子SA交换当一个IKE SA需要创建多对IPSec SA时，需要使用创建子SA交换来协商多于一对的IPSec SA。另外，创建子SA交换还可以用于IKE SA的重协商。 123456Initiator Responder-------------------------------------------------------------------HDR, SK &#123;SA, Ni, [KEi], TSi, TSr&#125; --&gt; &lt;-- HDR, SK &#123;SA, Nr, [KEr], TSi, TSr&#125; 创建子SA交换包含一个交换两条消息，交换的发起者可以是初始交换的协商发起方，也可以是初始交换的协商响应方。创建子SA交换必须在初始交换完成后进行，交换消息由初始交换协商的密钥进行保护。 通知交换运行IKE协商的两端有时会传递一些控制信息，例如错误信息或者通告信息，这些信息在IKEv2中是通过通知交换完成的。 通知交换必须在IKE SA保护下进行，也就是说通知交换只能发生在初始交换之后。控制信息可能是IKE SA的，那么通知交换必须由该IKE SA来保护进行；也可能是某子SA的，那么该通知交换必须由生成该子SA的IKE SA来保护进行。 123456Initiator Responder-------------------------------------------------------------------HDR, SK &#123;[N,] [D,] [CP,] ...&#125; --&gt; &lt;-- HDR, SK &#123;[N,] [D,] [CP], ...&#125; 参考[1] S600-E V200R019C00 配置指南-VPN [2] RFC5996 Internet Key Exchange Protocol Version 2 (IKEv2)]]></content>
      <categories>
        <category>网络</category>
      </categories>
      <tags>
        <tag>网络协议</tag>
        <tag>ipsec</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[1. Two Sum]]></title>
    <url>%2F2018%2F10%2F31%2Ftwo-sum%2F</url>
    <content type="text"><![CDATA[DescriptionGiven an array of integers, return indices of the two numbers such that they add up to a specific target. You may assume that each input would have exactly one solution, and you may not use the same element twice. ExampleGiven nums = [2, 7, 11, 15], target = 9, Because nums[0] + nums[1] = 2 + 7 = 9,return [0, 1]. Solution方法1两层循环，内层循环查找是否存在一个y使得 x + y = target 时间复杂度 O(n^2)空间复杂度 O(1)12345678910111213class Solution &#123;public: vector&lt;int&gt; twoSum(vector&lt;int&gt;&amp; nums, int target) &#123; for (int x = 0; x &lt; nums.size(); x++) &#123; for (int y = x + 1; y &lt; nums.size(); y++) &#123; if (nums[y] == target - nums[x]) &#123; return &#123;x, y&#125;; &#125; &#125; &#125; return &#123;&#125;; &#125;&#125;; 方法2对数组排序，用两个指针 (x, y)，分别指向数组的头和尾。若 nums[x] + nums[y] &gt; target, y–;若 nums[x] + nums[y] &lt; target, x++; 时间复杂度 O(nlgn)空间复杂度 O(1)1234567891011121314151617class Solution &#123;public: vector&lt;int&gt; twoSum(vector&lt;int&gt;&amp; nums, int target) &#123; sort(nums.begin(), nums.end()); int x = 0, y = nums.size() - 1; while (x &lt; y) &#123; if (nums[x] + nums[y] == target) &#123; return &#123;x, y&#125;; &#125; else if (nums[x] + nums[y] &gt; target) &#123; y--; &#125; else if (nums[x] + nums[y] &lt; target) &#123; x++; &#125; &#125; return &#123;&#125;; &#125;&#125;; 方法3使用 unordered_map 查找效率要快一点若未找到 nums[target - nums[i]] 已经存在于map中, 存入nums[i], 找到则返回 时间复杂度 O(nlgn)空间复杂度 O(n)12345678910111213class Solution &#123;public: vector&lt;int&gt; twoSum(vector&lt;int&gt;&amp; nums, int target) &#123; unordered_map&lt;int, int&gt; m; for (int i = 0; i &lt; nums.size(); i++) &#123; if (m.count(target - nums[i])) &#123; return &#123;m[target - nums[i]], i&#125;; &#125; m[nums[i]] = i; &#125; return &#123;&#125;; &#125;&#125;;]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Hash Table</tag>
      </tags>
  </entry>
</search>
