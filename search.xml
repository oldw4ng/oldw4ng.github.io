<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>strongSwan 配置使用</title>
      <link href="/2020/04/23/ipsec2/"/>
      <url>/2020/04/23/ipsec2/</url>
      
        <content type="html"><![CDATA[<p>本文主要介绍了 IPsec 的一个开源解决方案 storngSwan 的配置和使用方法，并抓包理解 IKEv2 过程。</p><a id="more"></a><h2 id="strongSwan-简介"><a href="#strongSwan-简介" class="headerlink" title="strongSwan 简介"></a>strongSwan 简介</h2><p>strongSwan 是一个一款基于 FreeS/WAN 的 IPsec的开源解决方案。对客户端和服务器提供了加密和验证功能。独特的功能是使用X.509 属性证书来实现基于组成员身份的访问控制方案。StrongSwan可与其他IPsec实现互操作，包括各种Microsoft Windows和macOS VPN客户端。模块化的StrongSwan 5.0分支完全实现了网络密钥交换（IKEv2）协议，由RFC 5996定义。</p><h2 id="strongSwan-安装"><a href="#strongSwan-安装" class="headerlink" title="strongSwan 安装"></a>strongSwan 安装</h2><p>用两台 CentOS 7 虚拟机进行测试</p><p><img src="https://oldw4ng-sh-1258452357.cos.ap-shanghai.myqcloud.com/img/test_env.png" alt="test env"></p><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p><code>wget http://download.strongswan.org/strongswan-x.x.x.tar.bz2   #把xxx换成版本号</code></p><h3 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h3><p><code>tar xjvf strongswan-x.x.x.tar.bz2; cd strongswan-x.x.x</code></p><h3 id="configure"><a href="#configure" class="headerlink" title="configure"></a>configure</h3><p><code>./configure --prefix=/usr --sysconfdir=/etc --&lt;your-options&gt;</code></p><blockquote><p>注：这里可能会提示缺少gmp库，需要安装 gmp-devel</p></blockquote><h3 id="build-amp-amp-install"><a href="#build-amp-amp-install" class="headerlink" title="build &amp;&amp; install"></a>build &amp;&amp; install</h3><p><code>make &amp;&amp; make install</code></p><h2 id="证书生成与安装"><a href="#证书生成与安装" class="headerlink" title="证书生成与安装"></a>证书生成与安装</h2><h3 id="证书生成"><a href="#证书生成" class="headerlink" title="证书生成"></a>证书生成</h3><p>这里用的是 ipsec 里边的 pki 工具，openssl 也可以做</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成CA证书</span></span><br><span class="line">ipsec pki --gen --outform pem &gt; cakey.pem<span class="comment"># 创建私钥</span></span><br><span class="line">ipsec pki --self --<span class="keyword">in</span> cakey.pem --dn <span class="string">"C=CN, O=Oldw4ng, CN=Oldw4ng CA"</span> --ca --lifetime 365 --outform pem &gt; cacert.pem<span class="comment"># 自签发CA证书</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成服务器证书</span></span><br><span class="line">ipsec pki --gen --outform pem &gt; serverkey.pem</span><br><span class="line">ipsec pki --pub --<span class="keyword">in</span> serverkey.pem --outform pem &gt; serverpub.pem</span><br><span class="line">ipsec pki --issue --lifetime 30 --cacert cacert.pem --cakey cakey.pem --<span class="keyword">in</span> serverpub.pem --dn <span class="string">"C=CN, O=Oldw4ng, CN=10.211.55.17"</span> --san=<span class="string">"10.211.55.17"</span> --flag serverAuth --flag ikeIntermediate --outform pem &gt; servercert.pem</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成客户端证书</span></span><br><span class="line">ipsec pki --gen --outform pem &gt; clientkey.pem</span><br><span class="line">ipsec pki --pub --<span class="keyword">in</span> clientkey.pem --outform pem &gt; clientpub.pem</span><br><span class="line">ipsec pki --issue --lifetime 30 --cacert cacert.pem --cakey cakey.pem --<span class="keyword">in</span> clientpub.pem --dn <span class="string">"C=CN, O=Oldw4ng, CN=10.211.55.16"</span> --outform pem &gt; clientcert.pem</span><br></pre></td></tr></table></figure><h3 id="证书安装"><a href="#证书安装" class="headerlink" title="证书安装"></a>证书安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># vm1 (10.211.55.16)</span></span><br><span class="line">mv cacert.pem /etc/swanctl/x509ca/</span><br><span class="line">mv clientkey.pem /etc/swanctl/rsa/</span><br><span class="line">mv clientcert.pem /etc/swanctl/x509/</span><br><span class="line"></span><br><span class="line"><span class="comment"># vm2 (10.211.55.17)</span></span><br><span class="line">mv cacert.pem /etc/swanctl/x509ca/</span><br><span class="line">mv serverkey.pem /etc/swanctl/rsa/</span><br><span class="line">mv servercert.pem /etc/swanctl/x509/</span><br></pre></td></tr></table></figure><h2 id="strongSwan-配置"><a href="#strongSwan-配置" class="headerlink" title="strongSwan 配置"></a>strongSwan 配置</h2><p>本文使用 swanctl 进行配置</p><h3 id="Client"><a href="#Client" class="headerlink" title="Client"></a>Client</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># cat /etc/swanctl/conf.d/client.conf</span></span><br><span class="line">connections &#123;</span><br><span class="line">    <span class="built_in">test</span> &#123;</span><br><span class="line">        remote_addrs = 10.211.55.17</span><br><span class="line"></span><br><span class="line">        <span class="built_in">local</span> &#123;</span><br><span class="line">            auth = pubkey</span><br><span class="line">            certs = clientcert.pem</span><br><span class="line">        &#125;</span><br><span class="line">        remote &#123;</span><br><span class="line">            auth = pubkey</span><br><span class="line">            id = 10.211.55.17</span><br><span class="line">        &#125;</span><br><span class="line">        children &#123;</span><br><span class="line">            <span class="built_in">test</span> &#123;</span><br><span class="line"></span><br><span class="line">                esp_proposals = aes256-sha256-x25519</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        version = 2</span><br><span class="line">        mobike = no</span><br><span class="line">        proposals = aes256-sha256-x25519</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Server"><a href="#Server" class="headerlink" title="Server"></a>Server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># cat /etc/swanctl/conf.d/server.conf</span></span><br><span class="line">connections &#123;</span><br><span class="line">    <span class="built_in">test</span> &#123;</span><br><span class="line">        local_addrs = 10.211.55.17</span><br><span class="line"></span><br><span class="line">        <span class="built_in">local</span> &#123;</span><br><span class="line">            auth = pubkey</span><br><span class="line">            certs = servercert.pem</span><br><span class="line">            id = 10.211.55.17</span><br><span class="line">        &#125;</span><br><span class="line">        remote &#123;</span><br><span class="line">            auth = pubkey</span><br><span class="line">        &#125;</span><br><span class="line">        children &#123;</span><br><span class="line">            <span class="built_in">test</span> &#123;</span><br><span class="line">                remote_ts = 10.211.55.0/24</span><br><span class="line">                esp_proposals = aes256-sha256-x25519</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        version = 2</span><br><span class="line">        mobike = no</span><br><span class="line">        proposals = aes256-sha256-x25519</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="strongSwan-启动"><a href="#strongSwan-启动" class="headerlink" title="strongSwan 启动"></a>strongSwan 启动</h2><h3 id="防火墙"><a href="#防火墙" class="headerlink" title="防火墙"></a>防火墙</h3><p>打开 500 和 4500 端口</p><h3 id="启动进程"><a href="#启动进程" class="headerlink" title="启动进程"></a>启动进程</h3><p><code>/usr/libexec/ipsec/charon &amp;</code></p><h3 id="加载配置"><a href="#加载配置" class="headerlink" title="加载配置"></a>加载配置</h3><p><code>swanctl --load-all</code></p><h3 id="启动ipsec"><a href="#启动ipsec" class="headerlink" title="启动ipsec"></a>启动ipsec</h3><p><code>ipsec up &lt;conn&gt;</code></p><h3 id="关闭ipsec"><a href="#关闭ipsec" class="headerlink" title="关闭ipsec"></a>关闭ipsec</h3><p><code>ipsec down &lt;conn&gt;</code></p><h2 id="抓包"><a href="#抓包" class="headerlink" title="抓包"></a>抓包</h2><p>下图展示了一次完整的 IPsec 建立、加密及断开的过程：</p><p><img src="https://oldw4ng-sh-1258452357.cos.ap-shanghai.myqcloud.com/img/ipsec_pcap.png" alt=""></p><p>根据 RFC 5996 中对IKEv2的说明可知，IKEv2 协议由两个阶段的交互过程构成。在本例中也就是前面6条（两对）报文就是 IKEv2交互的报文。第一阶段称为 IKE_SA_INIT，主要功能是协商加密算法，交换随机数，并进行Diffie-Hellman交换。第二阶段称为 IKE_AUTH，对前面的消息进行身份验证，交换标识和证书，并建立第一个子SA。 这些消息的一部分被加密，并通过通过IKE_SA_INIT交换建立的密钥来保护完整性，因此对于窃听者来说，身份是隐藏的，并且所有消息中的所有字段都经过身份验证。 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Initiator                         Responder</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">HDR, SAi1, KEi, Ni  --&gt;</span><br><span class="line">                             &lt;--  HDR, SAr1, KEr, Nr, [CERTREQ]</span><br><span class="line"></span><br><span class="line">HDR, SK &#123;IDi, [CERT,] [CERTREQ,]</span><br><span class="line">    [IDr,] AUTH, SAi2,</span><br><span class="line">    TSi, TSr&#125;    --&gt;</span><br><span class="line">                             &lt;--  HDR, SK &#123;IDr, [CERT,] AUTH,</span><br><span class="line">                                      SAr2, TSi, TSr&#125;</span><br></pre></td></tr></table></figure><h3 id="IKE-SA-INIT"><a href="#IKE-SA-INIT" class="headerlink" title="IKE_SA_INIT"></a>IKE_SA_INIT</h3><p>先看第一个报文：</p><p><img src="https://oldw4ng-sh-1258452357.cos.ap-shanghai.myqcloud.com/img/ike_sa_init1.png" alt=""></p><p>上图中红框分别对应了 SAi1, KEi, Ni</p><p>因为我只配了一个proposal，这里就只显示了一个</p><table><thead><tr><th>加密算法</th><th>完整性算法</th><th>伪随机数生成函数</th><th>Diffie-Hellman组</th></tr></thead><tbody><tr><td>AES_CBC_256</td><td>HMAC_SHA2_256_128</td><td>PRF_HMAC_SHA2_256</td><td>X25519</td></tr></tbody></table><p>再看第二个报文：</p><p><img src="https://oldw4ng-sh-1258452357.cos.ap-shanghai.myqcloud.com/img/ike_sa_init2.png" alt=""></p><p>Responder 回应的内容我们只关心 SA 和 CERTREQ。这时的 SA 就是双方协商出来共用的 SA。</p><p>再看 CERTREQ，这里边有一个 Certificate Authority Data，查了一下  RFC 5996 有如下说明：</p><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">The Certification Authority value is a concatenated list of SHA-1 hashes of the public keys of trusted Certification Authorities (CAs). Each is encoded as the SHA-1 hash of the Subject Public Key Info element (see section 4.1.2.7 of [PKIX]) from each Trust Anchor certificate. The 20-octet hashes are concatenated and included with no other formatting.</span><br></pre></td></tr></table></figure></blockquote><p>就是 CA 证书中公钥内容的 SHA-1 摘要值。就是 RFC 3280 中的 <code>subjectPublicKeyInfo</code> ：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">TBSCertificate  ::&#x3D;  SEQUENCE  &#123;</span><br><span class="line">     version         [0]  EXPLICIT Version DEFAULT v1,</span><br><span class="line">     serialNumber         CertificateSerialNumber,</span><br><span class="line">     signature            AlgorithmIdentifier,</span><br><span class="line">     issuer               Name,</span><br><span class="line">     validity             Validity,</span><br><span class="line">     subject              Name,</span><br><span class="line">     subjectPublicKeyInfo SubjectPublicKeyInfo,</span><br><span class="line">     issuerUniqueID  [1]  IMPLICIT UniqueIdentifier OPTIONAL,</span><br><span class="line">                          -- If present, version MUST be v2 or v3</span><br><span class="line">     subjectUniqueID [2]  IMPLICIT UniqueIdentifier OPTIONAL,</span><br><span class="line">                          -- If present, version MUST be v2 or v3</span><br><span class="line">     extensions      [3]  EXPLICIT Extensions OPTIONAL</span><br><span class="line">                          -- If present, version MUST be v3</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用 asn1dump 软件打开 CA 证书，黄色部分就是 <code>subjectPublicKeyInfo</code>：</p><p><img src="https://oldw4ng-sh-1258452357.cos.ap-shanghai.myqcloud.com/img/cacert_parse.png" alt=""></p><p>对这部分做 SHA-1 摘要运算：</p><p><img src="https://oldw4ng-sh-1258452357.cos.ap-shanghai.myqcloud.com/img/subjectPublicKeyInfoSHA1.png" alt=""></p><p>得到结果与报文中的一致。这个时候 IKEv2 的第一阶段已经完成了，双方协商出了一个共用的算法集合。</p><h3 id="IKE-AUTH"><a href="#IKE-AUTH" class="headerlink" title="IKE_AUTH"></a>IKE_AUTH</h3><p>IKE_AUTH 负责身份认证，并创建第一个Child SA（一对IPSec SA ）</p><p><img src="https://oldw4ng-sh-1258452357.cos.ap-shanghai.myqcloud.com/img/ike_auth1.png" alt=""></p><p>从报文中我们可以看到认证的信息都已经被加密了，我也没找到strongSwan里边</p><h3 id="CREATE-CHILD-SA"><a href="#CREATE-CHILD-SA" class="headerlink" title="CREATE_CHILD_SA"></a>CREATE_CHILD_SA</h3><p>子SA交换2条消息建立一对Child SA：</p><p><img src="https://oldw4ng-sh-1258452357.cos.ap-shanghai.myqcloud.com/img/create_child_sa.png" alt=""></p><p>至此，一条IPsec 通道就建立完成了。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>[1] <a href="https://www.strongswan.org/" target="_blank" rel="noopener">strongSwan.org</a></p><p>[2] <a href="https://en.wikipedia.org/wiki/StrongSwan" target="_blank" rel="noopener">strongSwan Wiki</a></p><p>[3] <a href="http://www.beijinghuayu.com.cn/centos7配置strongswan/" target="_blank" rel="noopener">Centos7配置strongswan</a></p>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络协议 </tag>
            
            <tag> ipsec </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>IPsec 基本原理</title>
      <link href="/2020/04/21/ipsec1/"/>
      <url>/2020/04/21/ipsec1/</url>
      
        <content type="html"><![CDATA[<p>本文主要介绍 IPsec 协议和 IKEv2 的原理，strongSwan 的配置及使用直接跳到下一篇</p><a id="more"></a><h2 id="IPsec-简介"><a href="#IPsec-简介" class="headerlink" title="IPsec 简介"></a>IPsec 简介</h2><p>互联网安全协议（英语：Internet Protocol Security，缩写：IPsec）是一个协议包，透过对IP协议的分组进行加密和认证来保护IP协议的网络传输协议族（一些相互关联的协议的集合）。</p><p>IPsec主要由以下协议组成：一、认证头（AH），为IP数据报提供无连接数据完整性、消息认证以及防重放攻击保护；二、封装安全载荷（ESP），提供机密性、数据源认证、无连接完整性、防重放和有限的传输流（traffic-flow）机密性；三、安全关联（SA），提供算法和数据包，提供AH、ESP操作所需的参数。</p><p>IPSec通过加密与验证等方式，从以下几个方面保障了用户业务数据在Internet中的安全传输：</p><ul><li>数据来源验证：接收方验证发送方身份是否合法。</li><li>数据加密：发送方对数据进行加密，以密文的形式在Internet上传送，接收方对接收的加密数据进行解密后处理或直接转发。</li><li>数据完整性：接收方对接收的数据进行验证，以判定报文是否被篡改。</li><li>抗重放：接收方拒绝旧的或重复的数据包，防止恶意用户通过重复发送捕获到的数据包所进行的攻击。</li></ul><h2 id="IPsec-协议框架"><a href="#IPsec-协议框架" class="headerlink" title="IPsec 协议框架"></a>IPsec 协议框架</h2><h3 id="安全联盟"><a href="#安全联盟" class="headerlink" title="安全联盟"></a>安全联盟</h3><p>安全联盟SA（Security Association）是通信对等体间对某些要素的协定，它描述了对等体间如何利用安全服务（例如加密）进行安全的通信。这些要素包括对等体间使用何种安全协议、需要保护的数据流特征、对等体间传输的数据的封装模式、协议采用的加密和验证算法，以及用于数据安全转换、传输的密钥和SA的生存周期等。</p><p>IPSec安全传输数据的前提是在IPSec对等体（即运行IPSec协议的两个端点）之间成功建立安全联盟。IPSec安全联盟简称IPSec SA，由一个三元组来唯一标识，这个三元组包括安全参数索引SPI（Security Parameter Index）、目的IP地址和使用的安全协议号（AH或ESP）。其中，SPI是为唯一标识SA而生成的一个32位比特的数值，它被封装在AH和ESP头中。</p><p>IPSec SA是单向的逻辑连接，通常成对建立（Inbound和Outbound）。因此两个IPSec对等体之间的双向通信，最少需要建立一对IPSec SA形成一个安全互通的IPSec隧道，分别对两个方向的数据流进行安全保护。</p><p>另外，IPSec SA的个数还与安全协议相关。如果只使用AH或ESP来保护两个对等体之间的流量，则对等体之间就有两个SA，每个方向上一个。如果对等体同时使用了AH和ESP，那么对等体之间就需要四个SA，每个方向上两个，分别对应AH和ESP。</p><h3 id="安全协议"><a href="#安全协议" class="headerlink" title="安全协议"></a>安全协议</h3><p>IPSec使用认证头AH（Authentication Header）和封装安全载荷ESP（Encapsulating Security Payload）两种IP传输层协议来提供认证或加密等安全服务。</p><ul><li><p>AH协议</p><p>AH仅支持认证功能，不支持加密功能。AH在每一个数据包的标准IP报头后面添加一个AH报文头。AH对数据包和认证密钥进行Hash计算，接收方收到带有计算结果的数据包后，执行同样的Hash计算并与原计算结果比较，传输过程中对数据的任何更改将使计算结果无效，这样就提供了数据来源认证和数据完整性校验。AH协议的完整性验证范围为整个IP报文。</p></li><li><p>ESP协议</p><p>ESP支持认证和加密功能。ESP在每一个数据包的标准IP报头后面添加一个ESP报文头，并在数据包后面追加一个ESP尾（ESP Trailer和ESP Auth data）。与AH不同的是，ESP将数据中的有效载荷进行加密后再封装到数据包中，以保证数据的机密性，但ESP没有对IP头的内容进行保护，除非IP头被封装在ESP内部（采用隧道模式）。</p></li></ul><p><strong>AH协议与ESP协议比较</strong></p><table><thead><tr><th>安全特性</th><th>AH</th><th style="text-align:left">ESP</th></tr></thead><tbody><tr><td>协议号</td><td>51</td><td style="text-align:left">50</td></tr><tr><td>数据完整性校验</td><td>支持（验证整个IP报文）</td><td style="text-align:left">支持（传输模式：不验证IP头，隧道模式：验证整个IP报文）</td></tr><tr><td>数据源验证</td><td>支持</td><td style="text-align:left">支持</td></tr><tr><td>数据加密</td><td>不支持</td><td style="text-align:left">支持</td></tr><tr><td>防报文重放攻击</td><td>支持</td><td style="text-align:left">支持</td></tr><tr><td>IPSec NAT-T（NAT穿越）</td><td>不支持</td><td style="text-align:left">支持</td></tr></tbody></table><p><strong>报文头结构</strong></p><p><strong>AH报文头结构</strong></p><p><img src="https://oldw4ng-sh-1258452357.cos.ap-shanghai.myqcloud.com/img/ah_header.png" alt=""></p><p><strong>ESP报文头结构</strong></p><p><img src="https://oldw4ng-sh-1258452357.cos.ap-shanghai.myqcloud.com/img/esp_header.png" alt=""></p><h3 id="封装模式"><a href="#封装模式" class="headerlink" title="封装模式"></a>封装模式</h3><p>封装模式是指将AH或ESP相关的字段插入到原始IP报文中，以实现对报文的认证和加密，封装模式有传输模式和隧道模式两种。</p><h4 id="传输模式"><a href="#传输模式" class="headerlink" title="传输模式"></a>传输模式</h4><p>在传输模式中，AH头或ESP头被插入到IP头与传输层协议头之间，保护TCP/UDP/ICMP负载。由于传输模式未添加额外的IP头，所以原始报文中的IP地址在加密后报文的IP头中可见。以TCP报文为例，原始报文经过传输模式封装后，报文格式如下图所示。<br><img src="https://oldw4ng-sh-1258452357.cos.ap-shanghai.myqcloud.com/img/ipsec_transport.png" alt="img"></p><p>传输模式下，与AH协议相比，ESP协议的完整性验证范围不包括IP头，无法保证IP头的安全。</p><h4 id="隧道模式"><a href="#隧道模式" class="headerlink" title="隧道模式"></a>隧道模式</h4><p>在隧道模式下，AH头或ESP头被插到原始IP头之前，另外生成一个新的报文头放到AH头或ESP头之前，保护IP头和负载。以TCP报文为例，原始报文经隧道模式封装后的报文结构如下图所示。<br><img src="https://oldw4ng-sh-1258452357.cos.ap-shanghai.myqcloud.com/img/ipsec_tunnel.png" alt="img"></p><p>隧道模式下，与AH协议相比，ESP协议的完整性验证范围不包括新IP头，无法保证新IP头的安全。</p><h4 id="传输模式和隧道模式比较"><a href="#传输模式和隧道模式比较" class="headerlink" title="传输模式和隧道模式比较"></a>传输模式和隧道模式比较</h4><p>传输模式和隧道模式的区别在于：</p><ul><li>从安全性来讲，隧道模式优于传输模式。它可以完全地对原始IP数据报进行验证和加密。隧道模式下可以隐藏内部IP地址，协议类型和端口。</li><li>从性能来讲，隧道模式因为有一个额外的IP头，所以它将比传输模式占用更多带宽。</li><li>从场景来讲，传输模式主要应用于两台主机或一台主机和一台VPN网关之间通信；隧道模式主要应用于两台VPN网关之间或一台主机与一台VPN网关之间的通信。</li></ul><p>当安全协议同时采用AH和ESP时，AH和ESP协议必须采用相同的封装模式。</p><h3 id="加密和验证"><a href="#加密和验证" class="headerlink" title="加密和验证"></a>加密和验证</h3><p>IPSec提供了两种安全机制：加密和验证。加密机制保证数据的机密性，防止数据在传输过程中被窃听；验证机制能保证数据真实可靠，防止数据在传输过程中被仿冒和篡改。</p><h4 id="加密"><a href="#加密" class="headerlink" title="加密"></a>加密</h4><p>IPSec采用对称加密算法对数据进行加密和解密。数据发送方和接收方使用相同的密钥进行加密、解密。</p><p>用于加密和解密的对称密钥可以手工配置，也可以通过IKE协议自动协商生成。</p><p>常用的对称加密算法包括：数据加密标准DES（Data Encryption Standard）、3DES（Triple Data Encryption Standard）、先进加密标准AES（Advanced Encryption Standard）。其中，DES和3DES算法安全性低，存在安全风险，不推荐使用。</p><h4 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h4><p>IPSec的加密功能，无法验证解密后的信息是否是原始发送的信息或完整。IPSec采用HMAC（Keyed-Hash Message Authentication Code）功能，比较数字签名进行数据包完整性和真实性验证。</p><p>通常情况下，加密和验证通常配合使用。在IPSec发送方，加密后的报文通过验证算法和对称密钥生成数字签名，IP报文和数字签名同时发给对端；在IPSec接收方，使用相同的验证算法和对称密钥对加密报文进行处理，同样得到签名，然后比较数字签名进行数据完整性和真实性验证，验证不通过的报文直接丢弃，验证通过的报文再进行解密。</p><p>同加密一样，用于验证的对称密钥也可以手工配置，或者通过IKE协议自动协商生成。</p><p>常用的验证算法包括：消息摘要MD5（Message Digest 5）、安全散列算法SHA1（Secure Hash Algorithm 1）、SHA2。其中，MD5、SHA1算法安全性低，存在安全风险，不推荐使用。</p><h3 id="密钥交换"><a href="#密钥交换" class="headerlink" title="密钥交换"></a>密钥交换</h3><p>密钥交换有两种解决方式：</p><ul><li><p>带外共享密钥</p><p>在发送、接收设备上手工配置静态的加密、验证密钥。双方通过带外共享的方式（例如通过电话或邮件方式）保证密钥一致性。这种方式的缺点是安全性低，可扩展性差，在点到多点组网中配置密钥的工作量成倍增加。另外，为提升网络安全性需要周期性修改密钥，这种方式下也很难实施。</p></li><li><p>使用一个安全的密钥分发协议</p><p>通过IKE协议自动协商密钥。IKE采用DH（Diffie-Hellman）算法在不安全的网络上安全地分发密钥。这种方式配置简单，可扩展性好，特别是在大型动态的网络环境下此优点更加突出。同时，通信双方通过交换密钥交换材料来计算共享的密钥，即使第三方截获了双方用于计算密钥的所有交换数据，也无法计算出真正的密钥，这样极大地提高了安全性。</p></li></ul><h4 id="IKE协议"><a href="#IKE协议" class="headerlink" title="IKE协议"></a>IKE协议</h4><p>因特网密钥交换IKE（Internet Key Exchange）协议建立在Internet安全联盟和密钥管理协议ISAKMP定义的框架上，是基于UDP（User Datagram Protocol）的应用层协议。它为IPSec提供了自动协商密钥、建立IPSec安全联盟的服务，能够简化IPSec的配置和维护工作。</p><p>对等体之间建立一个IKE SA完成身份验证和密钥信息交换后，在IKE SA的保护下，根据配置的AH/ESP安全协议等参数协商出一对IPSec SA。此后，对等体间的数据将在IPSec隧道中加密传输。</p><p>IKE SA是一个双向的逻辑连接，两个对等体间只建立一个IKE SA。</p><h4 id="IKE安全机制"><a href="#IKE安全机制" class="headerlink" title="IKE安全机制"></a>IKE安全机制</h4><p>IKE具有一套自保护机制，可以在网络上安全地认证身份、分发密钥、建立IPSec SA：</p><ul><li><p>身份认证</p><p>身份认证确认通信双方的身份（对等体的IP地址或名称），包括预共享密钥PSK（pre-shared key）认证、数字证书RSA（rsa-signature）认证。</p><ul><li><p>在预共享密钥认证中，通信双方采用共享的密钥对报文进行Hash计算，判断双方的计算结果是否相同。如果相同，则认证通过；否则认证失败。</p><p>当有1个对等体对应多个对等体时，需要为每个对等体配置预共享的密钥。该方法在小型网络中容易建立，但安全性较低。</p></li><li><p>在数字证书认证中，通信双方使用CA证书进行数字证书合法性验证，双方各有自己的公钥（网络上传输）和私钥（自己持有）。发送方对原始报文进行Hash计算，并用自己的私钥对报文计算结果进行加密，生成数字签名。接收方使用发送方的公钥对数字签名进行解密，并对报文进行Hash计算，判断计算结果与解密后的结果是否相同。如果相同，则认证通过；否则认证失败。</p><p>使用数字证书安全性高，但需要CA来颁发数字证书，适合在大型网络中使用。</p></li></ul><p>IKE支持的认证算法有：MD5、SHA2-256。</p></li><li><p>身份保护</p><p>身份数据在密钥产生之后加密传送，实现了对身份数据的保护。</p><p>IKE支持的加密算法有：DES、3DES、AES-128、AES-192、AES-256。</p></li><li><p>DH</p><p>DH是一种公共密钥交换方法，它用于产生密钥材料，并通过ISAKMP消息在发送和接收设备之间进行密钥材料交换。然后，两端设备各自计算出完全相同的对称密钥。该对称密钥用于计算加密和验证的密钥。在任何时候，通信双方都不交换真正的密钥。DH密钥交换是IKE的精髓所在。</p></li><li><p>PFS</p><p>完善的前向安全性PFS（Perfect Forward Secrecy）通过执行一次额外的DH交换，确保即使IKE SA中使用的密钥被泄露，IPSec SA中使用的密钥也不会受到损害。</p></li></ul><p>为了保证更好的安全性，建议使用SHA2-256认证算法和AES加密算法。</p><h2 id="IPsec-基本原理"><a href="#IPsec-基本原理" class="headerlink" title="IPsec 基本原理"></a>IPsec 基本原理</h2><p>IPSec通过在IPSec对等体间建立双向安全联盟形成一个安全互通的IPSec隧道，并通过定义IPSec保护的数据流将要保护的数据引入该IPSec隧道，然后对流经IPSec隧道的数据通过安全协议进行加密和验证，进而实现在Internet上安全传输指定的数据。</p><p>IPSec安全联盟可以通过IKEv1或IKEv2协议自动协商建立。</p><h3 id="IKEv2-安全联盟协商过程"><a href="#IKEv2-安全联盟协商过程" class="headerlink" title="IKEv2 安全联盟协商过程"></a>IKEv2 安全联盟协商过程</h3><p>建立一对IPSec SA，IKEv2正常情况使用2次交换共4条消息就可以完成一对IPSec SA的建立，如果要求建立的IPSec SA大于一对时，每一对IPSec SA只需额外增加1次创建子SA交换，也就是2条消息就可以完成。</p><p>IKEv2定义了三种交换：初始交换（Initial Exchanges）、创建子SA交换（Create_Child_SA Exchange）以及通知交换（Informational Exchange）。</p><h4 id="初始交换"><a href="#初始交换" class="headerlink" title="初始交换"></a>初始交换</h4><p>正常情况下，IKEv2通过初始交换就可以完成第一对IPSec SA的协商建立。IKEv2初始交换对应IKEv1的第一阶段，初始交换包含两次交换四条消息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Initiator                         Responder</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">HDR, SAi1, KEi, Ni    --&gt;</span><br><span class="line">                             &lt;--  HDR, SAr1, KEr, Nr, [CERTREQ]</span><br><span class="line"></span><br><span class="line">HDR, SK &#123;IDi, [CERT,] [CERTREQ,]</span><br><span class="line">    [IDr,] AUTH, SAi2,</span><br><span class="line">    TSi, TSr&#125;       --&gt;</span><br><span class="line">                             &lt;--  HDR, SK &#123;IDr, [CERT,] AUTH,</span><br><span class="line">                                      SAr2, TSi, TSr&#125;</span><br></pre></td></tr></table></figure><p>IKE_SA_INIT交换，以明文方式完成IKE SA的参数协商，包括协商加密和验证算法，交换临时随机数和DH交换。IKE_SA_INIT交换后生成一个共享密钥材料，通过这个共享密钥材料可以衍生出IPSec SA的所有密钥。</p><p>IKE_AUTH交换，以加密方式完成身份认证、对前两条信息的认证和IPSec SA的参数协商。IKEv2支持RSA签名认证、预共享密钥认证以及扩展认证方法EAP（Extensible Authentication Protocol）。发起者通过在消息3中省去认证载荷来表明需要使用EAP认证。</p><h4 id="创建子SA交换"><a href="#创建子SA交换" class="headerlink" title="创建子SA交换"></a>创建子SA交换</h4><p>当一个IKE SA需要创建多对IPSec SA时，需要使用创建子SA交换来协商多于一对的IPSec SA。另外，创建子SA交换还可以用于IKE SA的重协商。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Initiator                         Responder</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">HDR, SK &#123;SA, Ni, [KEi],</span><br><span class="line">           TSi, TSr&#125;  --&gt;</span><br><span class="line">                             &lt;--  HDR, SK &#123;SA, Nr, [KEr],</span><br><span class="line">                                      TSi, TSr&#125;</span><br></pre></td></tr></table></figure><p>创建子SA交换包含一个交换两条消息，交换的发起者可以是初始交换的协商发起方，也可以是初始交换的协商响应方。创建子SA交换必须在初始交换完成后进行，交换消息由初始交换协商的密钥进行保护。</p><h4 id="通知交换"><a href="#通知交换" class="headerlink" title="通知交换"></a>通知交换</h4><p>运行IKE协商的两端有时会传递一些控制信息，例如错误信息或者通告信息，这些信息在IKEv2中是通过通知交换完成的。</p><p>通知交换必须在IKE SA保护下进行，也就是说通知交换只能发生在初始交换之后。控制信息可能是IKE SA的，那么通知交换必须由该IKE SA来保护进行；也可能是某子SA的，那么该通知交换必须由生成该子SA的IKE SA来保护进行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Initiator                         Responder</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">HDR, SK &#123;[N,] [D,]</span><br><span class="line">    [CP,] ...&#125;  --&gt;</span><br><span class="line">                             &lt;--  HDR, SK &#123;[N,] [D,]</span><br><span class="line">                                      [CP], ...&#125;</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>[1]    <a href="https://support.huawei.com/enterprise/zh/doc/EDOC1100116968/b436f4a5" target="_blank" rel="noopener">S600-E V200R019C00 配置指南-VPN</a></p><p>[2]    RFC5996 <a href="https://tools.ietf.org/html/rfc5996" target="_blank" rel="noopener">Internet Key Exchange Protocol Version 2 (IKEv2)</a></p>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络协议 </tag>
            
            <tag> ipsec </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>1. Two Sum</title>
      <link href="/2018/10/31/two-sum/"/>
      <url>/2018/10/31/two-sum/</url>
      
        <content type="html"><![CDATA[<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given an array of integers, return indices of the two numbers such that they add up to a specific target.</p><p>You may assume that each input would have exactly one solution, and you may not use the same element twice.</p><a id="more"></a><h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p>Given nums = [2, 7, 11, 15], target = 9,</p><p>Because nums[0] + nums[1] = 2 + 7 = 9,<br>return [0, 1].</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="方法1"><a href="#方法1" class="headerlink" title="方法1"></a>方法1</h3><p>两层循环，内层循环查找是否存在一个y使得 x + y = target</p><p>时间复杂度 O(n^2)<br>空间复杂度 O(1)<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; twoSum(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; nums.size(); x++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> y = x + <span class="number">1</span>; y &lt; nums.size(); y++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[y] == target - nums[x]) &#123;</span><br><span class="line">                    <span class="keyword">return</span> &#123;x, y&#125;;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h3 id="方法2"><a href="#方法2" class="headerlink" title="方法2"></a>方法2</h3><p>对数组排序，用两个指针 (x, y)，分别指向数组的头和尾。<br>若 nums[x] + nums[y] &gt; target, y–;<br>若 nums[x] + nums[y] &lt; target, x++;</p><p>时间复杂度 O(nlgn)<br>空间复杂度 O(1)<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; twoSum(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        sort(nums.begin(), nums.end());</span><br><span class="line">        <span class="keyword">int</span> x = <span class="number">0</span>, y = nums.size() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (x &lt; y) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[x] + nums[y] == target) &#123;</span><br><span class="line">                <span class="keyword">return</span> &#123;x, y&#125;;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[x] + nums[y] &gt; target) &#123;</span><br><span class="line">                y--;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[x] + nums[y] &lt; target) &#123;</span><br><span class="line">                x++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h3 id="方法3"><a href="#方法3" class="headerlink" title="方法3"></a>方法3</h3><p>使用 unordered_map 查找效率要快一点<br>若未找到 nums[target - nums[i]] 已经存在于map中, 存入nums[i], 找到则返回</p><p>时间复杂度 O(nlgn)<br>空间复杂度 O(n)<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; twoSum(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; m;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.size(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (m.count(target - nums[i])) &#123;</span><br><span class="line">                <span class="keyword">return</span> &#123;m[target - nums[i]], i&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">            m[nums[i]] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Array </tag>
            
            <tag> Hash Table </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
